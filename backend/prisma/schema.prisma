// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id          String @id @unique(sort: Asc)
  nickname    String @unique(sort: Asc)
  avatar      String @db.Text
  intra_login String @unique(sort: Asc)
  status      String @default("offline")
  elo         Int    @default(1000)

  otp_enabled  Boolean @default(false)
  otp_verified Boolean @default(false)
  otp_base32   String?
  otp_auth_url String?

  Memberships    Memberships[]
  invitesSent    Invites[]      @relation("sent_invites")
  inviteReceived Invites[]      @relation("received_invites")
  blockedIssuer  BlockedUsers[] @relation("block_issuer")
  blockedTarget  BlockedUsers[] @relation("block_target")
  messages       Messages[]     @relation("message_user")
  matches_one    Matches[]      @relation("matches_one")
  matches_two    Matches[]      @relation("matches_two")

  @@map("users")
}

model Memberships {
  id            Int      @id @unique @default(autoincrement())
  channelId     Int
  userId        String
  owner         Boolean  @default(false)
  administrator Boolean  @default(false)
  banned        Boolean  @default(false)
  muted         Boolean  @default(false)
  channel       Channels @relation(fields: [channelId], references: [id])
  user          Users    @relation(fields: [userId], references: [id])

  @@unique([channelId, userId])
  @@map("memberships")
}

model Channels {
  id          Int           @id @unique @default(autoincrement())
  type        String        @default("public")
  name        String
  password    String
  protected   Boolean       @default(false)
  user2user   Boolean       @default(false)
  Memberships Memberships[]
  Messages    Messages[]    @relation("channel_message")

  @@map("channels")
}

model BlockedUsers {
  id        String @id @default(uuid())
  issuer_id String
  targer_id String

  issuer_user Users @relation("block_issuer", fields: [issuer_id], references: [id])
  target_user Users @relation("block_target", fields: [targer_id], references: [id])

  @@unique([issuer_id, targer_id])
  @@map("blocked_users")
}

model Invites {
  id        String @id @default(uuid())
  user_id   String
  target_id String

  sender Users @relation("sent_invites", fields: [user_id], references: [id])
  target Users @relation("received_invites", fields: [target_id], references: [id])

  @@unique([user_id, target_id])
  @@map("invites")
}

model Messages {
  id         String   @id @default(uuid())
  channel_id Int
  user_id    String
  message    String
  time       DateTime @default(now())

  channel Channels @relation("channel_message", fields: [channel_id], references: [id])
  user    Users    @relation("message_user", fields: [user_id], references: [id])

  @@map("messages")
}

model Matches {
  id          String   @id @unique @default(uuid())
  p_one       String
  p_two       String
  p_one_score Int
  p_two_score Int
  start       DateTime @default(now())
  end         DateTime

  player_one Users @relation("matches_one", fields: [p_one], references: [id])
  player_two Users @relation("matches_two", fields: [p_two], references: [id])

  @@map("matches")
}
